{"version":3,"sources":["../node_modules/knex/lib/dialects sync /^/.//.*//index/.js$","use-query-string.ts","App.tsx","serviceWorker.ts","index.tsx","querylab.ts"],"names":["map","./mssql/index.js","./mysql/index.js","./mysql2/index.js","./oracle/index.js","./oracledb/index.js","./postgres/index.js","./redshift/index.js","./sqlite3/index.js","webpackContext","req","id","webpackContextResolve","__webpack_require__","o","e","Error","code","keys","Object","resolve","module","exports","setQueryStringValue","key","value","queryString","arguments","length","undefined","window","location","search","values","qs","parse","newQsValue","stringify","objectSpread","defineProperty","qsValue","newurl","protocol","host","pathname","history","pushState","path","setQueryStringWithoutPageReload","concat","useQueryString","initialValue","_useState","useState","isArray","getQueryStringValue","_useState2","slicedToArray","setValue","useCallback","newValue","DEFAULT_QUERY","DEFAULT_DIALECT","Dialect","postgres","Boolean","hostname","match","ReactDOM","render","react_default","a","createElement","_useQueryString","_useQueryString2","dialect","setDialect","_useQueryString3","_useQueryString4","query","setQuery","updateDialect","updateQuery","compressed","LZString","compressToEncodedURIComponent","displayQuery","decompressFromEncodedURIComponent","_translate","translate","_translate2","toQuery","sql","bindings","noop","className","Typography","variant","FormControl","InputLabel","Select","labelId","onChange","target","label","allDialects","d","MenuItem","Paper","lib_default","onValueChange","highlight","languages","javascript","disabled","format","TableContainer","component","Table","TableHead","TableRow","TableCell","style","width","TableBody","index","Link","href","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","__webpack_exports__","knex__WEBPACK_IMPORTED_MODULE_0__","knex__WEBPACK_IMPORTED_MODULE_0___default","n","dialects","push","knexjs","knex","Knex","client","parsed","eval","native","toSQL","toNative","_unused"],"mappings":"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","file":"static/js/main.b8c07e8b.chunk.js","sourcesContent":["var map = {\n\t\"./mssql/index.js\": 259,\n\t\"./mysql/index.js\": 146,\n\t\"./mysql2/index.js\": 275,\n\t\"./oracle/index.js\": 147,\n\t\"./oracledb/index.js\": 353,\n\t\"./postgres/index.js\": 182,\n\t\"./redshift/index.js\": 359,\n\t\"./sqlite3/index.js\": 367\n};\n\n\nfunction webpackContext(req) {\n\tvar id = webpackContextResolve(req);\n\treturn __webpack_require__(id);\n}\nfunction webpackContextResolve(req) {\n\tif(!__webpack_require__.o(map, req)) {\n\t\tvar e = new Error(\"Cannot find module '\" + req + \"'\");\n\t\te.code = 'MODULE_NOT_FOUND';\n\t\tthrow e;\n\t}\n\treturn map[req];\n}\nwebpackContext.keys = function webpackContextKeys() {\n\treturn Object.keys(map);\n};\nwebpackContext.resolve = webpackContextResolve;\nmodule.exports = webpackContext;\nwebpackContext.id = 258;","import React, { useState, useCallback, Dispatch, SetStateAction } from 'react';\n\nimport qs, { ParsedQuery } from 'query-string';\nimport { isArray } from 'util';\n\nexport function setQueryStringWithoutPageReload(qsValue: string) { \n  const newurl = window.location.protocol + \"//\"\n  + window.location.host + window.location.pathname + qsValue;\n\n  window.history.pushState({ path: newurl }, \"\", newurl);\n};\n\nexport function setQueryStringValue(key: string, value: string, queryString: string = window.location.search) {\n  const values = qs.parse(queryString);\n  const newQsValue = qs.stringify({...values, [key]: value });\n  setQueryStringWithoutPageReload(`?${newQsValue}`);\n};\n\nexport function getQueryStringValue(key: string, queryString: string = window.location.search): string | null {\n  const values: ParsedQuery = qs.parse(queryString); \n  const value: string | string[] | null = values[key];\n  if (isArray(value)) {\n    return value[0];\n  } else {\n    return value\n  }\n};\n\nexport function useQueryString(key: string, initialValue: string): [string, Dispatch<SetStateAction<string>>] {\n  const [value, setValue] = useState(getQueryStringValue(key) || initialValue);\n  const onSetValue = useCallback(\n    newValue => {\n      setValue(newValue);\n      setQueryStringValue(key, newValue);\n    },\n    [key]\n  );\n\n  return [value, onSetValue];\n}\n","import React, { useCallback, ChangeEvent } from 'react';\nimport './App.css';\n\n// querylab lib code\nimport { Dialect, allDialects, translate } from './querylab';\n\n// used for LZ compress query and store in query string\nimport LZString from 'lz-string';\nimport { useQueryString } from './use-query-string';\n\n//\n// code editor and syntax highlighter\n//\nimport Editor from 'react-simple-code-editor';\nimport { highlight, languages } from 'prismjs';\nimport 'prismjs/components/prism-sql';\nimport 'prismjs/themes/prism-solarizedlight.css'; // change the theme here\n\nimport { format } from 'sql-formatter';\n\nimport { FormControl, InputLabel, Select, MenuItem, Typography, Table, TableHead, TableBody, TableRow, TableCell, Link, Paper, Grid, TableContainer } from '@material-ui/core';\n\n\n// decompresses to: knex('change').select('me').count();\nconst DEFAULT_QUERY = \"NYOwpgHgFA5AxgCwIYgOZhgSgHQGcwA2YcALrALYY5wD2AriGZgNxA\";\nconst DEFAULT_DIALECT = Dialect.postgres;\n\nexport default function App() {\n\tconst [dialect, setDialect] = useQueryString('dialect', DEFAULT_DIALECT);\n\tconst [query, setQuery] = useQueryString('query', DEFAULT_QUERY);\n\n\tconst updateDialect = useCallback((value: string) => {\n\t\tsetDialect(value);\n\t}, [setDialect]);\n\n\tconst updateQuery = useCallback((value: string) => {\n\t\tconst compressed = LZString.compressToEncodedURIComponent(value);\n\t\tsetQuery(compressed);\n\t}, [setQuery]);\n\n\tconst displayQuery = LZString.decompressFromEncodedURIComponent(query) || \"\";\n\tconst [toQuery, sql, bindings] = translate(displayQuery, dialect);\n\n\tconst noop = () => {};\n\n\treturn (\n\t\t<div className='App'>\n\t\t\t{/* header */}\n\t\t\t<header><Typography variant='h2'>Knex QueryLab</Typography></header>\n\n\t\t\t<section>\n\t\t\t\t{/* body */}\n\n\t\t\t\t{/* body - select dialect */}\n\t\t\t\t<FormControl variant=\"outlined\">\n\t\t\t\t\t<InputLabel id=\"dialect-select-label\">Dialect</InputLabel>\n\t\t\t\t\t<Select className='dialect' labelId=\"dialect-select-label\" value={dialect} onChange={(e) => updateDialect(e.target.value as string)} label=\"Dialect\">\n\t\t\t\t\t\t{allDialects().map((d) => <MenuItem value={d}>{d}</MenuItem>)}\n\t\t\t\t\t</Select>\n\t\t\t\t</FormControl>\n\n\t\t\t\t<Typography className='subtitle' variant='h6'>Expression</Typography>\n\n\t\t\t\t{/* body - input knex query*/}\n\t\t\t\t<Paper className='code'>\n\t\t\t\t\t<Editor\n\t\t\t\t\t\tvalue={displayQuery}\n\t\t\t\t\t\tonValueChange={updateQuery}\n\t\t\t\t\t\thighlight={(code) => highlight(code, languages.javascript, 'javascript')} />\n\t\t\t\t</Paper>\n\n\t\t\t\t<Typography className='subtitle' variant='h6'>Query</Typography>\n\n\t\t\t\t{/* body - output sql*/}\n\t\t\t\t<Paper className='code'>\n\t\t\t\t\t<Editor\n\t\t\t\t\t\tdisabled={true}\n\t\t\t\t\t\tvalue={toQuery}\n\t\t\t\t\t\tonValueChange={noop}\n\t\t\t\t\t\thighlight={(code) => highlight(format(code), languages.sql, 'sql')} />\n\t\t\t\t</Paper>\n\n\t\t\t\t<Typography className='subtitle' variant='h6'>SQL - Native</Typography>\n\n\t\t\t\t{/* body - output native*/}\n\t\t\t\t<Paper className='code'>\n\t\t\t\t\t<Editor\n\t\t\t\t\t\tdisabled={true}\n\t\t\t\t\t\tvalue={sql}\n\t\t\t\t\t\tonValueChange={noop}\n\t\t\t\t\t\thighlight={(code) => highlight(format(code), languages.sql, 'sql')} />\n\t\t\t\t</Paper>\n\n\t\t\t\t{/* body - output bindings*/}\n\t\t\t\t<TableContainer\tcomponent={Paper} className='bindings'>\n\t\t\t\t\t<Table>\n\t\t\t\t\t\t<TableHead>\n\t\t\t\t\t\t\t<TableRow><TableCell style={{ width: '20px' }}>Binding</TableCell><TableCell>Value</TableCell></TableRow>\n\t\t\t\t\t\t</TableHead>\n\t\t\t\t\t\t<TableBody>\n\t\t\t\t\t\t\t{bindings.map((value, index) => {\n\t\t\t\t\t\t\t\treturn (<TableRow key={index+1}>\n\t\t\t\t\t\t\t\t\t<TableCell>{index+1}</TableCell>\n\t\t\t\t\t\t\t\t\t<TableCell>{value}</TableCell>\n\t\t\t\t\t\t\t\t</TableRow>);\n\t\t\t\t\t\t\t})}\n\t\t\t\t\t\t</TableBody>\n\t\t\t\t\t</Table>\n\t\t\t\t</TableContainer>\n\t\t\t</section>\n\n\t\t\t{/* footer */}\n\t\t\t<footer>\n\t\t\t\t<Typography variant='body1'>\n\t\t\t\t\tExperiment with the <Link href='https://knexjs.org'>KnexJS</Link> API to build\n\t\t\t\t\tSQL. <Link href=\"https://github.com/michaelavila/knex-querylab\">View source.</Link>\n\t\t\t\t</Typography>\n\t\t\t</footer>\n\t\t</div>\n\t);\n};\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\ntype Config = {\n  onSuccess?: (registration: ServiceWorkerRegistration) => void;\n  onUpdate?: (registration: ServiceWorkerRegistration) => void;\n};\n\nexport function register(config?: Config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(\n      (process as { env: { [key: string]: string } }).env.PUBLIC_URL,\n      window.location.href\n    );\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl: string, config?: Config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl: string, config?: Config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n","import Knex from 'knex';\n\nexport enum Dialect {\n  //mssql = \"mssql\",\n  mysql = \"mysql\",\n  mysql2 = \"mysql2\",\n  //oracle = \"oracle\",\n  oracledb = \"oracledb\",\n  postgres = \"postgres\",\n  redshift = \"redshift\",\n  sqlite3 = \"sqlite3\",\n}\n\n// annoying\nexport function allDialects() {\n  var dialects = []\n  for (const d in Dialect) {\n    dialects.push(d)\n  }\n  return dialects\n}\n\nexport function translate(knexjs: string, dialect: string): [string, string, any[]] {\n  const knex = Knex({client: dialect})\n  try {\n    const parsed = eval(knexjs);\n    const query = parsed.toQuery();\n    const native = parsed.toSQL().toNative();\n    return [query, native.sql, native.bindings];\n  } catch {\n    return [\"syntax error\", \"\", []]\n  }\n}\n\n"],"sourceRoot":""}