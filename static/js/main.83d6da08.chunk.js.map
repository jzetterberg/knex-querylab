{"version":3,"sources":["App.tsx","../node_modules/knex/lib/dialects sync /^/.//.*//index/.js$","serviceWorker.ts","index.tsx"],"names":["Dialect","allDialects","dialects","d","push","translate","knexjs","dialect","knex","Knex","client","query","eval","toQuery","toSQL","sql","_unused","setQueryStringWithoutPageReload","qsValue","newurl","window","location","protocol","host","pathname","history","pushState","path","setQueryStringValue","key","value","queryString","arguments","length","undefined","search","values","qs","parse","newQsValue","stringify","Object","_Users_me_Repos_michaelavila_knex_querylab_node_modules_babel_runtime_helpers_esm_objectSpread__WEBPACK_IMPORTED_MODULE_2__","_Users_me_Repos_michaelavila_knex_querylab_node_modules_babel_runtime_helpers_esm_defineProperty__WEBPACK_IMPORTED_MODULE_1__","concat","getQueryStringValue","isArray","useQueryString","initialValue","_useState","useState","_useState2","_Users_me_Repos_michaelavila_knex_querylab_node_modules_babel_runtime_helpers_esm_slicedToArray__WEBPACK_IMPORTED_MODULE_0__","setValue","useCallback","newValue","App","_useQueryString","sqlite3","_useQueryString2","setDialect","_useQueryString3","LZString","compressToEncodedURIComponent","_useQueryString4","setQuery","displayQuery","decompressFromEncodedURIComponent","react__WEBPACK_IMPORTED_MODULE_5___default","a","createElement","_material_ui_core_Container__WEBPACK_IMPORTED_MODULE_6__","className","_material_ui_core_Typography__WEBPACK_IMPORTED_MODULE_10__","variant","href","_material_ui_core_Select__WEBPACK_IMPORTED_MODULE_8__","onChange","event","target","map","i","_material_ui_core_MenuItem__WEBPACK_IMPORTED_MODULE_7__","_material_ui_core_TextField__WEBPACK_IMPORTED_MODULE_9__","multiline","e","./mssql/index.js","./mysql/index.js","./mysql2/index.js","./oracle/index.js","./oracledb/index.js","./postgres/index.js","./redshift/index.js","./sqlite3/index.js","webpackContext","req","id","webpackContextResolve","__webpack_require__","o","Error","code","keys","resolve","module","exports","Boolean","hostname","match","ReactDOM","render","react_default","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.83d6da08.chunk.js","sourcesContent":["import Knex from 'knex';\nimport LZString from 'lz-string';\nimport React, { useState, useCallback, Dispatch, SetStateAction } from 'react';\nimport Container from '@material-ui/core/Container';\nimport MenuItem from '@material-ui/core/MenuItem';\nimport Select from '@material-ui/core/Select';\nimport TextField from '@material-ui/core/TextField';\nimport Typography from '@material-ui/core/Typography';\nimport qs, { ParsedQuery } from 'query-string';\n\nimport './App.css';\nimport { isString, isArray } from 'util';\n\nenum Dialect {\n  //mssql = \"mssql\",\n  mysql = \"mysql\",\n  mysql2 = \"mysql2\",\n  //oracle = \"oracle\",\n  oracledb = \"oracledb\",\n  postgres = \"postgres\",\n  redshift = \"redshift\",\n  sqlite3 = \"sqlite3\",\n}\n\n// annoying\nfunction allDialects() {\n  var dialects = []\n  for (const d in Dialect) {\n    dialects.push(d)\n  }\n  return dialects\n}\n\nfunction translate(knexjs: string, dialect: string): string {\n  const knex = Knex({client: dialect})\n  try {\n    const query = eval(knexjs).toQuery();\n    return eval(knexjs).toSQL().sql;\n  } catch {\n    return \"syntax error\"\n  }\n}\n\nfunction setQueryStringWithoutPageReload(qsValue: string) { \n    const newurl = window.location.protocol + \"//\"\n    + window.location.host + window.location.pathname + qsValue;\n\n    window.history.pushState({ path: newurl }, \"\", newurl);\n};\n\nfunction setQueryStringValue(key: string, value: string, queryString: string = window.location.search) {\n    const values = qs.parse(queryString);\n    const newQsValue = qs.stringify({...values, [key]: value });\n    setQueryStringWithoutPageReload(`?${newQsValue}`);\n};\n\nfunction getQueryStringValue(key: string, queryString: string = window.location.search): string | null {\n    const values: ParsedQuery = qs.parse(queryString); \n    const value: string | string[] | null = values[key];\n    if (isArray(value)) {\n        return value[0];\n    } else {\n        return value\n    }\n};\n\nfunction useQueryString(key: string, initialValue: string): [string, Dispatch<SetStateAction<string>>] {\n  const [value, setValue] = useState(getQueryStringValue(key) || initialValue);\n  const onSetValue = useCallback(\n    newValue => {\n      setValue(newValue);\n      setQueryStringValue(key, newValue);\n    },\n    [key]\n  );\n\n  return [value, onSetValue];\n}\n\nconst App: React.FC = () => {\n  const [dialect, setDialect] = useQueryString('dialect', Dialect.sqlite3)\n  const [query, setQuery] = useQueryString('query', LZString.compressToEncodedURIComponent(\"knex('change').select('me').count();\"));\n\n  const displayQuery = LZString.decompressFromEncodedURIComponent(query) || \"Unknown error\";\n\n  return (\n    <Container className='App'>\n      <Typography variant='h2'>Knex Query Lab</Typography>\n      <Typography variant='subtitle1'>\n        Experiment with the <a href='https://knexjs.org'>KnexJS</a> API to build\n        SQL. <a href=\"https://github.com/michaelavila/knex-querylab\">Also, view source.</a>\n      </Typography>\n\n      <div>\n        <Select className=\"dialectSelect\" value={dialect} onChange={(event) => setDialect(event.target.value as Dialect)}>\n        {allDialects().map((d, i) => {\n          return <MenuItem key={i} value={d}>{d}</MenuItem>\n        })}\n        </Select>\n      </div>\n\n      <TextField className=\"expressionInput\" multiline={true} onChange={(e) => setQuery(LZString.compressToEncodedURIComponent(e.target.value))} value={displayQuery}></TextField>\n      <code>{translate(displayQuery, dialect)}</code>\n    </Container>\n  );\n}\n\nexport default App;\n","var map = {\n\t\"./mssql/index.js\": 247,\n\t\"./mysql/index.js\": 139,\n\t\"./mysql2/index.js\": 263,\n\t\"./oracle/index.js\": 140,\n\t\"./oracledb/index.js\": 341,\n\t\"./postgres/index.js\": 175,\n\t\"./redshift/index.js\": 347,\n\t\"./sqlite3/index.js\": 355\n};\n\n\nfunction webpackContext(req) {\n\tvar id = webpackContextResolve(req);\n\treturn __webpack_require__(id);\n}\nfunction webpackContextResolve(req) {\n\tif(!__webpack_require__.o(map, req)) {\n\t\tvar e = new Error(\"Cannot find module '\" + req + \"'\");\n\t\te.code = 'MODULE_NOT_FOUND';\n\t\tthrow e;\n\t}\n\treturn map[req];\n}\nwebpackContext.keys = function webpackContextKeys() {\n\treturn Object.keys(map);\n};\nwebpackContext.resolve = webpackContextResolve;\nmodule.exports = webpackContext;\nwebpackContext.id = 246;","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\ntype Config = {\n  onSuccess?: (registration: ServiceWorkerRegistration) => void;\n  onUpdate?: (registration: ServiceWorkerRegistration) => void;\n};\n\nexport function register(config?: Config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(\n      (process as { env: { [key: string]: string } }).env.PUBLIC_URL,\n      window.location.href\n    );\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl: string, config?: Config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl: string, config?: Config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}